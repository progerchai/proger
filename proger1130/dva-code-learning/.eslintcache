[{"/Users/aiyouwei/Documents/proger/progerchai/proger1130/dva-code-learning/src/index.jsx":"1","/Users/aiyouwei/Documents/proger/progerchai/proger1130/dva-code-learning/src/dva/index.jsx":"2","/Users/aiyouwei/Documents/proger/progerchai/proger1130/dva-code-learning/src/dva/router.jsx":"3"},{"size":2028,"mtime":1607961542187,"results":"4","hashOfConfig":"5"},{"size":2662,"mtime":1607960596074,"results":"6","hashOfConfig":"5"},{"size":46,"mtime":1607958494455,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"s3g3ch",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aiyouwei/Documents/proger/progerchai/proger1130/dva-code-learning/src/index.jsx",["16"],"import React from \"react\";\nimport dva, { connect } from \"./dva\";\nimport { createBrowserHistory } from \"history\";\nimport { Router, Route, Link } from \"./dva/router\";\nimport key from \"keymaster\";\nlet app = dva({\n  history: createBrowserHistory(),\n});\n\napp.model({\n  namespace: \"counter\",\n  state: {\n    number: 0,\n  },\n  reducers: {\n    // 更新数据\n    updateState(state, { payload }) {\n      return { ...state, ...payload };\n    },\n    add(state) {\n      return { number: state.number + 2 };\n    },\n    minus(state) {\n      return { number: state.number - 1 };\n    },\n    // [\"counter/add\"](state) {\n    //   // [\"counter/add\"] 这样写的原因是,getReducer还没有对 type 做处理\n    //   return { number: state.number + 1 };\n    // },\n  },\n  effects: {\n    *asyncAdd(state, { put }) {\n      yield delay(1000);\n      yield put({ type: \"add\" });\n    },\n  },\n  subscriptions: {\n    keyEvent({ dispatch }) {\n      window.onresize = function () {\n        dispatch({ type: \"counter/add\" });\n      };\n    },\n  },\n});\n\nfunction Counter(props) {\n  return (\n    <div>\n      <div> {props.number} </div>\n      <button onClick={() => props.dispatch({ type: \"counter/add\" })}>+</button>\n      <button onClick={() => props.dispatch({ type: \"counter/minus\" })}>\n        -\n      </button>\n      <button onClick={() => props.dispatch({ type: \"counter/asyncAdd\" })}>\n        asyncAdd\n      </button>\n    </div>\n  );\n}\n\nlet ConnectCounter = connect((state) => state.counter)(Counter);\nfunction Home() {\n  return <div>home</div>;\n}\n\n// app.router(() => <ConnectCounter />);\napp.router(({ history }) => (\n  <Router history={history}>\n    <>\n      <Link to=\"/\">home</Link>\n      <br />\n      <Link to=\"/counter\">counter</Link>\n      <Route path=\"/\" component={Home}></Route>\n      <Route path=\"/counter\" component={ConnectCounter}></Route>\n    </>\n  </Router>\n));\napp.start(\"#root\");\n\n// 自定义延迟函数\nfunction delay(time) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n}\n","/Users/aiyouwei/Documents/proger/progerchai/proger1130/dva-code-learning/src/dva/index.jsx",["17"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport { Provider, connect } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport * as sagaEffects from \"redux-saga/effects\";\n\nexport { connect };\nexport default function (opts = {}) {\n  let history = opts.history || createBrowserHistory();\n  let app = {\n    _models: [],\n    model,\n    _router: null,\n    router,\n    start,\n  };\n  function model(model) {\n    let prefixModel = prefixNamespace(model);\n    app._models.push(prefixModel);\n  }\n  function router(routerConfig) {\n    app._router = routerConfig;\n  }\n  function start(container) {\n    let reducers = getReducers(app);\n    let sagaMiddleware = createSagaMiddleware(); // 新建middleware\n    app._store = createStore(reducers, applyMiddleware(sagaMiddleware)); //插入middleware\n    function* rootSaga() {\n      const { takeEvery } = sagaEffects;\n      for (const model of app._models) {\n        const effects = model.effects;\n        for (const key in effects) {\n          //遍历effects\n          yield takeEvery(`${model.namespace}/${key}`, function* (action) {\n            console.log(\"执行了saga\");\n            yield effects[key](action, sagaEffects);\n          });\n        }\n      }\n    }\n    sagaMiddleware.run(rootSaga);\n    ReactDOM.render(\n      <Provider store={app._store}>{app._router({ history })}</Provider>,\n      document.querySelector(container)\n    );\n  }\n\n  return app;\n}\n\n/**\n * 将所有的model 的reducer 以namespace 为key 整合成新的reducers\n * {\n * namespace1:function(state,action){},\n * namespace2:function(state,action){}\n * }\n * @param {*} app\n */\nfunction getReducers(app) {\n  let reducers = {}; //用来合并,会传递给combineReducers\n  for (const model of app._models) {\n    // 这里的state 是这个 model 对应的分状态\n    reducers[model.namespace] = function (state = model.state || {}, action) {\n      let model_reducers = model[\"reducers\"] || {}; // 拿到一个model 的所有reducer\n      let reducer = model_reducers[action.type]; // model_reducers['counter/add'] =>  model_reducers['add']\n      if (reducer) {\n        return reducer(state, action);\n      }\n      return state;\n    };\n  }\n  return combineReducers(reducers);\n}\n\n/**\n * 把reducer 对象的属性名 加上 `namespace`\n * @param {*} m\n */\nfunction prefixNamespace(m) {\n  let reducers = m.reducers;\n  m.reducer = Object.keys(reducers).reduce((memo, key) => {\n    let newKey = `${m.namespace}/${key}`;\n    memo[newKey] = reducers[key];\n    return memo;\n  }, {});\n  return m;\n}\n","/Users/aiyouwei/Documents/proger/progerchai/proger1130/dva-code-learning/src/dva/router.jsx",[],{"ruleId":"18","severity":1,"message":"19","line":5,"column":8,"nodeType":"20","messageId":"21","endLine":5,"endColumn":11},{"ruleId":"22","severity":1,"message":"23","line":10,"column":1,"nodeType":"24","endLine":51,"endColumn":2},"no-unused-vars","'key' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration"]